from enum import Enum
from typing import Union
import numpy as np

normTypes = {
    "CNNL_TRANSFORMER_LAYERNORM",
    "CNNL_TRANSFORMER_RMSNORM",
    "CNNL_TRANSFORMER_SCALENORM"
}

dataTypes = [
    "CNNL_DTYPE_HALF",
    "CNNL_DTYPE_FLOAT",
    "CNNL_DTYPE_INT8",
    "CNNL_DTYPE_INT16",
    "CNNL_DTYPE_INT32",
    "CNNL_DTYPE_UINT8",
    "CNNL_DTYPE_UINT16",
    "CNNL_DTYPE_UINT32",
    "CNNL_DTYPE_BOOL",
]
dataTypeMap = {
    "CNNL_DTYPE_HALF":  np.float16,
    "CNNL_DTYPE_FLOAT": np.float,
    "CNNL_DTYPE_INT8":  np.int8,
    "CNNL_DTYPE_INT16": np.int16,
    "CNNL_DTYPE_INT32": np.int32,
    "CNNL_DTYPE_UINT8": np.uint8,
    "CNNL_DTYPE_UINT16": np.uint16,
    "CNNL_DTYPE_UINT32": np.uint32,
    "CNNL_DTYPE_BOOL":  np.bool,
}

LayernormResidualStructures = {
    "CNNL_TRANSFORMER_NO_LAYERNORM_NO_RESIDUAL",
    "CNNL_TRANSFORMER_NO_LAYERNORM_WITH_RESIDUAL",
    "CNNL_TRANSFORMER_PRE_LAYERNORM_NO_RESIDUAL",
    "CNNL_TRANSFORMER_POST_LAYERNORM_NO_RESIDUAL",
    "CNNL_TRANSFORMER_PRE_LAYERNORM_INSIDE_RESIDUAL",
    "CNNL_TRANSFORMER_PRE_LAYERNORM_OUTSIDE_RESIDUAL",
    "CNNL_TRANSFORMER_POST_LAYERNORM_INSIDE_RESIDUAL",
    "CNNL_TRANSFORMER_POST_LAYERNORM_OUTSIDE_RESIDUAL",
}

posEmbedTypes = {
    "CNNL_ATTN_NO_POSITION_EMBEDDING",
    "CNNL_ATTN_CROSS_ROTARY_EMBEDDING",
    "CNNL_ATTN_FOLD_ROTARY_EMBEDDING",
    "CNNL_ATTN_RELATIVE_POSITION_EMBEDDING",
    "CNNL_ATTN_ALIBI_POSITION_EMBEDDING",
    "CNNL_ATTN_CROSS_ROTARY_EMBEDDING_2D",
    "CNNL_ATTN_FOLD_ROTARY_EMBEDDING_2D",
}


def isRotaryEmbedding(type: str) -> bool:
    return type in ["CNNL_ATTN_FOLD_ROTARY_EMBEDDING",
                    "CNNL_ATTN_CROSS_ROTARY_EMBEDDING",
                    "CNNL_ATTN_FOLD_ROTARY_EMBEDDING_2D",
                    "CNNL_ATTN_CROSS_ROTARY_EMBEDDING_2D"]

def is2DRotaryEmbedding(type) -> bool:
    return type in ["CNNL_ATTN_FOLD_ROTARY_EMBEDDING_2D", "CNNL_ATTN_CROSS_ROTARY_EMBEDDING_2D"]


# FIXME: too much
Acts = {
    "CNNL_ACTIVATION_SIGMOID",
    "CNNL_ACTIVATION_RELU",
    "CNNL_ACTIVATION_RELU6",
    "CNNL_ACTIVATION_TANH",
    "CNNL_ACTIVATION_CLIPPED_RELU",
    "CNNL_ACTIVATION_ELU",
    "CNNL_ACTIVATION_IDENTITY",
    "CNNL_ACTIVATION_SELU",
    "CNNL_ACTIVATION_GELU",
    "CNNL_ACTIVATION_LEAKYRELU",
    "CNNL_ACTIVATION_TF_LEAKYRELU",
    "CNNL_ACTIVATION_CAFFE_RELU6",
    "CNNL_ACTIVATION_GLU",
    "CNNL_ACTIVATION_SWISH",
    "CNNL_ACTIVATION_SILU",
    "CNNL_ACTIVATION_HARDSIGMOID",
    "CNNL_ACTIVATION_HARDSWISH",
    "CNNL_ACTIVATION_ELU_V2",
    "CNNL_ACTIVATION_LOGSIGMOID",
    "CNNL_ACTIVATION_HARDSHRINK",
    "CNNL_ACTIVATION_SOFTSHRINK",
}

QuantLayouts = {
    "CNNL_QUANTIZE_NONE",
    "CNNL_QUANTIZE_PER_TENSOR",
    "CNNL_QUANTIZE_PER_CHANNEL",
}
